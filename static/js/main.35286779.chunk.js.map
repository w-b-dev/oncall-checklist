{"version":3,"sources":["Api/fetchCommits.tsx","Components/BaseCommitDisplay.tsx","Components/ListCommitDiff.tsx","Components/CommitSelector.tsx","Components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["getCommits","a","fetchFromGithub","res","commitList","map","entry","sha","message","commit","reverse","fetch","json","BaseCommitDisplay","currentSHA","htmlFor","id","type","disabled","value","slice","MemoizedBaseCommitDisplay","React","memo","ListCommitDiff","log","targetSHA","currentIndex","findIndex","targetIndex","style","borderTop","fontWeight","color","overflow","textTransform","fontFamily","whiteSpace","fontSize","paddingLeft","CommitSelector","onChange","e","name","multiple","defaultValue","i","display","padding","find","length","App","useState","setCurrentSHA","setLog","useEffect","then","rand","Math","random","randInitialCommit","round","selectedCommit","setSelectedCommit","className","event","optionSelected","target","selectedOptions","item","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","info"],"mappings":"iOAEaA,EAAU,uCAAG,8BAAAC,EAAA,sEACNC,IADM,cAClBC,EADkB,OAElBC,EAAuBD,EAC1BE,KAAI,SAACC,GAAD,MAA0D,CAC7DC,IAAKD,EAAMC,IACXC,QAASF,EAAMG,OAAOD,YAEvBE,UAPqB,kBAQjBN,GARiB,2CAAH,qDAuBjBF,EAAe,uCAAG,4BAAAD,EAAA,sEACJU,MAChB,iEAFoB,cAChBR,EADgB,gBAITA,EAAIS,OAJK,mFAAH,qD,OCvBrB,SAASC,EAAT,GAIiB,IAHfC,EAGc,EAHdA,WAIA,OACE,gCACE,uBAAOC,QAAQ,aAAf,0BACA,uBACEC,GAAG,aACHC,KAAK,OACLC,UAAQ,EACRC,MAAOL,EAAWM,MAAM,EAAG,QAM5B,IACQC,EAD0BC,IAAMC,KAAKV,GCjB7C,SAASW,EAAT,GAIsB,IAH3BC,EAG0B,EAH1BA,IACAX,EAE0B,EAF1BA,WACAY,EAC0B,EAD1BA,UAEMC,EAAeF,EAAIG,WAAU,SAACtB,GAAD,OAAWA,EAAMC,MAAQO,KACtDe,EAAcJ,EAAIG,WAAU,SAACtB,GAAD,OAAWA,EAAMC,MAAQmB,KAC3D,OACE,6BACGD,EACEL,MAAMO,EAAe,EAAGE,EAAc,GACtCxB,KAAI,SAACC,GAAD,OACH,qBAAoBwB,MAAO,CAAEC,UAAW,uBAAxC,UACE,sBACED,MAAO,CACLE,WAAY,OACZC,MAAO,aACPC,SAAU,SACVC,cAAe,YACfC,WAAY,OACZC,WAAY,UAPhB,SAUG/B,EAAMC,IAAIa,MAAM,EAAG,KAEtB,sBACEU,MAAO,CACLQ,SAAU,QACVC,YAAa,OAHjB,SAMGjC,EAAME,YAnBFF,EAAMC,QAuBhBG,YC/BF,SAAS8B,EAAT,GAK+B,IAAD,IAJnCf,EAImC,EAJnCA,IACAgB,EAGmC,EAHnCA,SACA3B,EAEmC,EAFnCA,WACAY,EACmC,EADnCA,UAEMC,EAAeF,EAAIG,WAAU,SAACc,GAAD,OAAOA,EAAEnC,MAAQO,KACpD,OACE,gCACE,uBAAOC,QAAQ,YAAf,yBACA,yBACE4B,KAAK,YACL3B,GAAG,YACH4B,UAAU,EACVH,SAAUA,EACVI,aAAc,MALhB,UAOE,wBAAQ3B,UAAQ,EAACC,MAAO,MAAxB,mCAGCM,EACEpB,KAAI,SAACC,EAAOwC,GACX,OACE,wBAEE3B,MAAOb,EAAMC,IACbW,SAAU4B,GAAKnB,EAHjB,SAKGrB,EAAMC,IAAIa,MAAM,EAAG,IAJfd,EAAMC,QAQhBG,aAEL,sBAAMoB,MAAO,CAAEiB,QAAS,QAASC,QAAS,MAAOV,SAAU,SAA3D,6BACGb,EAAIwB,MAAK,SAAC3C,GAAD,OAAWA,EAAMC,MAAQmB,YADrC,aACG,EAA8ClB,eADjD,kBAEOiB,EAAIyB,OAAS,EAAIvB,EAFxB,wCCQSwB,MA1Cf,WAEE,MAAoCC,mBAAiB,IAArD,mBAAOtC,EAAP,KAAmBuC,EAAnB,KACA,EAAsBD,mBAAmB,IAAzC,mBAAO3B,EAAP,KAAY6B,EAAZ,KACAC,qBAAU,WACRvD,IAAawD,MAAK,SAACrD,GAAD,OAASmD,EAAOnD,QACjC,IAGHoD,qBAAU,WACR,IAAME,EAAOC,KAAKC,SACZC,EAAoBF,KAAKG,MAAMJ,EAAOhC,EAAIyB,QAC5CzB,EAAIyB,QAAQG,EAAc5B,EAAImC,GAAmBrD,OACpD,CAACkB,IAEJ,MAA4C2B,mBAAS,IAArD,mBAAOU,EAAP,KAAuBC,EAAvB,KASA,OACE,uBAAMC,UAAU,MAAhB,UACE,cAAC,EAAD,CAAmBlD,WAAYA,IAC/B,cAAC0B,EAAD,CACEf,IAAKA,EACLgB,SAbwB,SAACwB,GAC7B,IACMC,EADcD,EAAME,OACSC,gBAAgBC,KACjD,GAEFN,EAAkBG,EAAe/C,QAS7BL,WAAYA,EACZY,UAAWoC,IAEb,cAACtC,EAAD,CACEC,IAAKA,EACLX,WAAYA,EACZY,UAAWoC,QC7BJQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,EAAgBa,QAAQC,Q","file":"static/js/main.35286779.chunk.js","sourcesContent":["import { Commit } from \"../types\";\n\nexport const getCommits = async (): Promise<Commit[]> => {\n  const res = await fetchFromGithub();\n  const commitList: Commit[] = res\n    .map((entry: { sha: string; commit: { message: string } }) => ({\n      sha: entry.sha,\n      message: entry.commit.message,\n    }))\n    .reverse();\n  return commitList;\n  // return mockCommitList;\n};\n\n/*const mockCommitList: Commit[] = [\n  { sha: \"12\", message: \"first commit\" },\n  { sha: \"34\", message: \"second commit\" },\n  { sha: \"78\", message: \"c\" },\n  { sha: \"56\", message: \"b\" },\n  {\n    sha: \"90\",\n    message: \"most recent commit\",\n  },\n];*/\n\nconst fetchFromGithub = async () => {\n  const res = await fetch(\n    \"https://api.github.com/repos/w-b-dev/oncall-checklist/commits\"\n  );\n  return await res.json();\n};\n","import React from \"react\";\n\nfunction BaseCommitDisplay({\n  currentSHA,\n}: {\n  currentSHA: string;\n}): JSX.Element {\n  return (\n    <div>\n      <label htmlFor=\"currentSHA\">Current SHA:</label>\n      <input\n        id=\"currentSHA\"\n        type=\"text\"\n        disabled\n        value={currentSHA.slice(0, 7)}\n      />\n    </div>\n  );\n}\n\nexport const MemoizedBaseCommitDisplay = React.memo(BaseCommitDisplay);\nexport default MemoizedBaseCommitDisplay;\n","import { CommitList } from \"../types\";\nimport React from \"react\";\n\nexport function ListCommitDiff({\n  log,\n  currentSHA,\n  targetSHA,\n}: CommitList): JSX.Element {\n  const currentIndex = log.findIndex((entry) => entry.sha === currentSHA);\n  const targetIndex = log.findIndex((entry) => entry.sha === targetSHA);\n  return (\n    <ol>\n      {log\n        .slice(currentIndex + 1, targetIndex + 1)\n        .map((entry) => (\n          <li key={entry.sha} style={{ borderTop: \"1px solid #33333399\" }}>\n            <span\n              style={{\n                fontWeight: \"bold\",\n                color: \"blueviolet\",\n                overflow: \"hidden\",\n                textTransform: \"uppercase\",\n                fontFamily: \"mono\",\n                whiteSpace: \"nowrap\",\n              }}\n            >\n              {entry.sha.slice(0, 7)}\n            </span>\n            <span\n              style={{\n                fontSize: \"small\",\n                paddingLeft: \"1ch\",\n              }}\n            >\n              {entry.message}\n            </span>\n          </li>\n        ))\n        .reverse()}\n    </ol>\n  );\n}\n","import { Log } from \"../types\";\nimport React, { ReactEventHandler } from \"react\";\ninterface CommitSelectorProps extends Log {\n  onChange: ReactEventHandler<HTMLSelectElement>;\n  currentSHA: string;\n  targetSHA: string;\n}\nexport function CommitSelector({\n  log,\n  onChange,\n  currentSHA,\n  targetSHA,\n}: CommitSelectorProps): JSX.Element {\n  const currentIndex = log.findIndex((e) => e.sha === currentSHA);\n  return (\n    <div>\n      <label htmlFor=\"targetSHA\">Target SHA:</label>\n      <select\n        name=\"targetSHA\"\n        id=\"targetSHA\"\n        multiple={false}\n        onChange={onChange}\n        defaultValue={\"N/A\"}\n      >\n        <option disabled value={\"N/A\"}>\n          -- list of commits --\n        </option>\n        {log\n          .map((entry, i) => {\n            return (\n              <option\n                key={entry.sha}\n                value={entry.sha}\n                disabled={i <= currentIndex}\n              >\n                {entry.sha.slice(0, 7)}\n              </option>\n            );\n          })\n          .reverse()}\n      </select>\n      <code style={{ display: \"block\", padding: \"1em\", fontSize: \"0.8em\" }}>\n        {log.find((entry) => entry.sha === targetSHA)?.message ??\n          `${log.length - 1 - currentIndex} commits waiting to be promoted`}\n      </code>\n    </div>\n  );\n}\n","import React, { SyntheticEvent, useEffect, useState } from \"react\";\nimport { getCommits } from \"../Api/fetchCommits\";\nimport BaseCommitDisplay from \"./BaseCommitDisplay\";\nimport { ListCommitDiff } from \"./ListCommitDiff\";\nimport { CommitSelector } from \"./CommitSelector\";\nimport { Commit } from \"../types\";\n\nfunction App(): JSX.Element {\n  /*TODO: add Context to share state*/\n  const [currentSHA, setCurrentSHA] = useState<string>(\"\");\n  const [log, setLog] = useState<Commit[]>([]);\n  useEffect(() => {\n    getCommits().then((res) => setLog(res));\n  }, []);\n\n  /*TODO: replace this useEffect with real info from Deploy/Netlify endpoint*/\n  useEffect(() => {\n    const rand = Math.random();\n    const randInitialCommit = Math.round(rand * log.length);\n    if (log.length) setCurrentSHA(log[randInitialCommit].sha);\n  }, [log]);\n  /*Above useEffect is temporary*/\n  const [selectedCommit, setSelectedCommit] = useState(\"\");\n  const handleCommitSelection = (event: SyntheticEvent<HTMLSelectElement>) => {\n    const eventTarget = event.target as HTMLSelectElement;\n    const optionSelected = eventTarget.selectedOptions.item(\n      0\n    ) as HTMLOptionElement;\n    setSelectedCommit(optionSelected.value);\n  };\n\n  return (\n    <main className=\"App\">\n      <BaseCommitDisplay currentSHA={currentSHA} />\n      <CommitSelector\n        log={log}\n        onChange={handleCommitSelection}\n        currentSHA={currentSHA}\n        targetSHA={selectedCommit}\n      />\n      <ListCommitDiff\n        log={log}\n        currentSHA={currentSHA}\n        targetSHA={selectedCommit}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Styles/index.css\";\nimport App from \"./Components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.info);\n"],"sourceRoot":""}