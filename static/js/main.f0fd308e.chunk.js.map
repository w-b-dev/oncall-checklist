{"version":3,"sources":["customHooks/useDeployedCommit.tsx","Api/fetchCommits.tsx","Components/BaseCommitDisplay.tsx","Components/ListCommitDiff.tsx","Components/CommitSelector.tsx","Components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["SEARCH_PATTERN","getCommits","branchOrSHA","a","fetchFromGithub","res","map","entry","sha","message","commit","getDeployedCommit","find","match","ifBranchOrSHAProvided","URLSearchParams","fetch","headers","Accept","Authorization","process","response","json","BaseCommitDisplay","currentSHA","htmlFor","id","type","disabled","value","slice","MemoizedBaseCommitDisplay","React","memo","ListCommitDiff","log","targetSHA","currentIndex","findIndex","targetIndex","style","borderTop","fontWeight","color","overflow","textTransform","fontFamily","whiteSpace","fontSize","paddingLeft","reverse","CommitSelector","onChange","e","name","multiple","defaultValue","i","display","padding","length","App","useState","setLog","isValid","setIsValid","commitMessage","setCommitMessage","startIndex","setStartIndex","useEffect","_commitMessage","_startIndex","search","asyncCall","then","x","extractCommit","useDeployedCommit","selectedCommit","setSelectedCommit","className","height","maxWidth","paddingTop","justifyContent","event","optionSelected","target","selectedOptions","item","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","info"],"mappings":"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","file":"static/js/main.f0fd308e.chunk.js","sourcesContent":["import { getDeployedCommit } from \"../Api/fetchCommits\";\nimport { useEffect, useState } from \"react\";\n\nconst extractCommit = (commitMessage: string, startIndex: number) => {\n  return commitMessage.slice(startIndex + 1, commitMessage.length - 3);\n};\n\nexport const SEARCH_PATTERN = /@\\d/;\n// const SEARCH_PATTERN = \"Updates\"; //This will not work. No commit to parse\n\nexport const useDeployedCommit = (): string => {\n  const [isValid, setIsValid] = useState(false);\n  const [commitMessage, setCommitMessage] = useState(\"\");\n  const [startIndex, setStartIndex] = useState(-1);\n  useEffect(() => {\n    const asyncCall = async () => {\n      const commit = await getDeployedCommit();\n      const _commitMessage = commit?.message ?? \"\";\n      setCommitMessage(_commitMessage);\n      const _startIndex = _commitMessage.search(SEARCH_PATTERN) ?? -1;\n      setStartIndex(_startIndex);\n      setIsValid(!!_commitMessage && _startIndex !== -1);\n    };\n    asyncCall().then((x) => null);\n  }, []);\n\n  if (isValid) return extractCommit(commitMessage, startIndex);\n  return \"\";\n};\n","import { Commit } from \"../types\";\nimport { SEARCH_PATTERN } from \"../customHooks/useDeployedCommit\";\n\nconst GITHUB_PAGES_BRANCH = \"gh-pages\";\n\nexport const getCommits = async (branchOrSHA?: string): Promise<Commit[]> => {\n  const res = await fetchFromGithub(branchOrSHA);\n  return res.map((entry: { sha: string; commit: { message: string } }) => ({\n    sha: entry.sha,\n    message: entry.commit.message,\n  }));\n};\n\nexport const getDeployedCommit = async (): Promise<Commit | undefined> => {\n  const res = await getCommits(GITHUB_PAGES_BRANCH);\n  return res.find((commit) => {\n    return commit.message.match(SEARCH_PATTERN);\n  });\n};\n\nconst fetchFromGithub = async (branchOrSHA?: string) => {\n  const ifBranchOrSHAProvided = branchOrSHA\n    ? `?${new URLSearchParams({\n        sha: branchOrSHA,\n      })}`\n    : \"\";\n  const response = await fetch(\n    \"https://api.github.com/repos/w-b-dev/oncall-checklist/commits\" +\n      ifBranchOrSHAProvided,\n    {\n      headers: {\n        Accept: \"application/vnd.github.v3+json\",\n        Authorization: process.env.REACT_APP_GITHUB_TOKEN ?? \"\", //Falls back to free tier\n      },\n    }\n  );\n  /*\n   * A fetch() promise only rejects when a network error is encountered (which is usually when thereâ€™s a permissions issue or similar). A fetch() promise does not reject on HTTP errors (404, etc.). Instead, a then() handler must check the Response.ok and/or Response.status properties.\n   * */\n  return response.json();\n};\n","import React from \"react\";\n\nfunction BaseCommitDisplay({\n  currentSHA,\n}: {\n  currentSHA: string;\n}): JSX.Element {\n  return (\n    <div>\n      <label htmlFor=\"currentSHA\">Current SHA:</label>\n      <input\n        id=\"currentSHA\"\n        type=\"text\"\n        disabled\n        value={currentSHA.slice(0, 7)}\n      />\n    </div>\n  );\n}\n\nexport const MemoizedBaseCommitDisplay = React.memo(BaseCommitDisplay);\nexport default MemoizedBaseCommitDisplay;\n","import { CommitList } from \"../types\";\nimport React from \"react\";\n\nexport function ListCommitDiff({\n  log,\n  currentSHA,\n  targetSHA,\n}: CommitList): JSX.Element {\n  const currentIndex = log.findIndex((entry) => entry.sha === currentSHA);\n  const targetIndex = log.findIndex((entry) => entry.sha === targetSHA);\n  return (\n    <ol>\n      {log\n        .slice(currentIndex + 1, targetIndex + 1)\n        .map((entry) => (\n          <li key={entry.sha} style={{ borderTop: \"1px solid #33333399\" }}>\n            <span\n              style={{\n                fontWeight: \"bold\",\n                color: \"blueviolet\",\n                overflow: \"hidden\",\n                textTransform: \"uppercase\",\n                fontFamily: \"mono\",\n                whiteSpace: \"nowrap\",\n              }}\n            >\n              {entry.sha.slice(0, 7)}\n            </span>\n            <span\n              style={{\n                fontSize: \"small\",\n                paddingLeft: \"1ch\",\n              }}\n            >\n              {entry.message}\n            </span>\n          </li>\n        ))\n        .reverse()}\n    </ol>\n  );\n}\n","import { Log } from \"../types\";\nimport React, { ReactEventHandler } from \"react\";\ninterface CommitSelectorProps extends Log {\n  onChange: ReactEventHandler<HTMLSelectElement>;\n  currentSHA: string;\n  targetSHA: string;\n}\nexport function CommitSelector({\n  log,\n  onChange,\n  currentSHA,\n  targetSHA,\n}: CommitSelectorProps): JSX.Element {\n  const currentIndex = log.findIndex((e) => e.sha === currentSHA);\n  return (\n    <div>\n      <label htmlFor=\"targetSHA\">Target SHA:</label>\n      <select\n        name=\"targetSHA\"\n        id=\"targetSHA\"\n        multiple={false}\n        onChange={onChange}\n        defaultValue={\"N/A\"}\n      >\n        <option disabled value={\"N/A\"}>\n          -- list of commits --\n        </option>\n        {log\n          .map((entry, i) => {\n            return (\n              <option\n                key={entry.sha}\n                value={entry.sha}\n                disabled={i <= currentIndex}\n              >\n                {entry.sha.slice(0, 7)}\n              </option>\n            );\n          })\n          .reverse()}\n      </select>\n      <code style={{ display: \"block\", padding: \"1em\", fontSize: \"0.8em\" }}>\n        {log.find((entry) => entry.sha === targetSHA)?.message ??\n          `${log.length - 1 - currentIndex} commits waiting to be promoted`}\n      </code>\n    </div>\n  );\n}\n","import React, { SyntheticEvent, useEffect, useState } from \"react\";\nimport { getCommits } from \"../Api/fetchCommits\";\nimport BaseCommitDisplay from \"./BaseCommitDisplay\";\nimport { ListCommitDiff } from \"./ListCommitDiff\";\nimport { CommitSelector } from \"./CommitSelector\";\nimport { Commit } from \"../types\";\nimport { useDeployedCommit } from \"../customHooks/useDeployedCommit\";\n\nfunction App(): JSX.Element {\n  /*TODO: add Context to share state*/\n  const [log, setLog] = useState<Commit[]>([]);\n  const currentSHA = useDeployedCommit();\n  useEffect(() => {\n    getCommits().then((res) => setLog(res.reverse()));\n  }, []);\n\n  const [selectedCommit, setSelectedCommit] = useState(\"\");\n  const handleCommitSelection = (event: SyntheticEvent<HTMLSelectElement>) => {\n    const eventTarget = event.target as HTMLSelectElement;\n    const optionSelected = eventTarget.selectedOptions.item(\n      0\n    ) as HTMLOptionElement;\n    setSelectedCommit(optionSelected.value);\n  };\n\n  return (\n    <main\n      className=\"App default-flex\"\n      style={{\n        color: \"white\",\n        height: \"100vh\",\n        maxWidth: \"50vw\",\n        paddingTop: \"33vh\",\n        justifyContent: \"initial\", //override\n      }}\n    >\n      <BaseCommitDisplay currentSHA={currentSHA} />\n      <CommitSelector\n        log={log}\n        onChange={handleCommitSelection}\n        currentSHA={currentSHA}\n        targetSHA={selectedCommit}\n      />\n      <ListCommitDiff\n        log={log}\n        currentSHA={currentSHA}\n        targetSHA={selectedCommit}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Styles/index.css\";\nimport App from \"./Components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.info);\n"],"sourceRoot":""}